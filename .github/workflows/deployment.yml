name: Build and Deploy to Google Cloud

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION }}
  REGISTRY_NAME: ${{ secrets.ARTIFACT_REGISTRY_NAME }}
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  HTTP_PORT: 8080
  CLOUDRUN_SERVICE_URL: ${{ secrets.CLOUDRUN_SERVICE_URL }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  BUCKET_URL: https://storage.googleapis.com/${{ secrets.BUCKET_NAME }}
  SECRET_KEY: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

jobs:
  security:
    name: vulnerability scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Install bandit
        run: pip install bandit

      - name: Run Safety to check for vulnerabilities
        run: bandit -r app

  # review:
  #   name: unit test
  #   runs-on: ubuntu-latest
  #   needs: security
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
      
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.9'

  #     - name: Install dependencies
  #       run: |
  #         cd app
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: Run Tests
  #       run: make app.test

  storage:
    name: Upload static files to GCS
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: make app.static

      - id: "auth"
        uses: google-github-actions/auth@v1.1.1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Clear static files in GCS
        run: |
          gsutil -m rm -r gs://${{ env.BUCKET_NAME }}/static/**

      - name: Upload static files to GCS
        run: |
          gsutil -m cp -r app/static/* gs://${{ env.BUCKET_NAME }}/static
      
      - name: Remove static
        run: make app.rm.static

      
  package:
    name: register image (prod)
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup dependencies
        run: sudo apt-get install -y jq make

      - name: Get repository name
        id: repo-name
        uses: MariachiBear/get-repo-name-action@v1.1.0
        with:
          with-owner: 'false'
          string-case: 'lowercase'

      - id: "auth"
        uses: google-github-actions/auth@v1.1.1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Authorize Docker push
        run: gcloud auth configure-docker $REGION-docker.pkg.dev

      - name: Copy requirements to docker
        run: |
          make ct.copy DEST_DIR=prod

      - name: Build and tag the docker image
        run: |-
          docker build \
           --build-arg APP_ENV=production \
           --build-arg REQUIREMENTS_PATH=app/requirements.txt \
           -f docker/prod/Dockerfile . --tag $REGION-docker.pkg.dev/$PROJECT_ID/$REGISTRY_NAME/${{ steps.repo-name.outputs.repository-name }}:$GITHUB_SHA

      - name: Push the image to the Google Artifact Registry (GAR)
        run: |-
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REGISTRY_NAME/${{ steps.repo-name.outputs.repository-name }}:$GITHUB_SHA

  deploy:
    name: deploy in cloud run (production)
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup dependencies
        run: sudo apt-get install -y jq make

      - name: Get repository name
        id: repo-name
        uses: MariachiBear/get-repo-name-action@v1.1.0
        with:
          with-owner: 'false' # Si no necesitas el nombre del owner
          string-case: 'lowercase' # Puedes ajustar el formato del texto

      - id: "auth"
        uses: google-github-actions/auth@v1.1.1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Authorize Docker push
        run: gcloud auth configure-docker $REGION-docker.pkg.dev

      - name: Copy requirements to docker
        run: |
          make ct.copy DEST_DIR=prod

      - name: Deploy
        run: |-
          gcloud run deploy ${{ steps.repo-name.outputs.repository-name }} \
          --region $REGION \
          --image $REGION-docker.pkg.dev/$PROJECT_ID/$REGISTRY_NAME/${{ steps.repo-name.outputs.repository-name }}:$GITHUB_SHA \
          --platform "managed" \
          --service-account $SERVICE_ACCOUNT_EMAIL \
          --port $HTTP_PORT \
          --set-env-vars PROJECT_ID=$PROJECT_ID,REGION=$REGION,CLOUDRUN_SERVICE_URL=$CLOUDRUN_SERVICE_URL,BUCKET_URL=$BUCKET_URL,PROJECT_NAME=${{ steps.repo-name.outputs.repository-name }},SECRET_KEY=$SECRET_KEY \
          --quiet

      - name: Hacer el servicio p√∫blico (Permitir invocaciones no autenticadas)
        run: |-
          gcloud run services add-iam-policy-binding ${{ steps.repo-name.outputs.repository-name }} \
          --region $REGION \
          --member="allUsers" \
          --role="roles/run.invoker"